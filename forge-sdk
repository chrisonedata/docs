# Laravel Forge SDK

- [Introduction](#introduction)
- [Installation](#installation)
- [Upgrading Forge SDK](#upgrading-forge-sdk)
- [Usage](#usage)
    - [Authenticated User](#authenticated-user)
    - [Managing Servers](#managing-servers)
    - [Server SSH Keys](#server-ssh-keys)
    - [Server Scheduled Jobs](#server-scheduled-jobs)
    - [Server Events](#server-events)
    - [Managing Services](#managing-services)
    - [Server Daemons](#server-daemons)
    - [Server Firewall Rules](#server-firewall-rules)
    - [Managing Sites](#managing-sites)
    - [Site Workers](#site-workers)
    - [Site Webhooks](#site-webhooks)
    - [Site SSL Certificates](#site-ssl-certificates)
    - [Managing MySQL](#managing-mysql)
    - [Managing Recipes](#managing-recipes)
    - [Managing Backups](#backups)

<a name="introduction"></a>
## Introduction

The Laravel Forge SDK provides an expressive interface for interacting with Forge's API and managing Laravel Forge servers.

<a name="installation"></a>
## Installation

To install the SDK in your project you need to require the package via composer:

    composer require laravel/forge-sdk

<a name="upgrading-forge-sdk"></a>
## Upgrading Forge SDK

When upgrading to a new major version of Forge SDK, it's important that you carefully review [the upgrade guide](https://github.com/laravel/forge-sdk/blob/master/UPGRADE.md).

<a name="usage"></a>
## Usage

You can create an instance of the SDK like so:

    $forge = new Laravel\Forge\Forge(TOKEN_HERE);

Using the forge instance you may perform multiple actions as well as retrieve the different resources Forge's API provides:

    $servers = $forge->servers();

This will give you an array of servers that you have access to, each server is represented by an instance of `Laravel\Forge\Resources\Server`, this instance has multiple public
properties like `$name`, `$id`, `$size`, `$region`, and others.

You may also retrieve a single server using:

    $server = $forge->server(SERVER_ID_HERE);

On multiple actions supported by this SDK you may need to pass some parameters, for example when creating a new server:

    $server = $forge->createServer([
        "provider"=> "ocean2",
        "credential_id"=> 1,
        "name"=> "test-via-api",
        "size"=> "01",
        "database"=> "test123",
        "php_version"=> "php71",
        "region"=> "ams2"
    ]);

These parameters will be used in the POST request sent to Forge servers, you can find more information about the parameters needed for each action on
[Forge's official API documentation](https://forge.laravel.com/api-documentation).

Notice that this request for example will only start the server creation process, your server might need a few minutes before it completes provisioning, you'll need to check
the Server's `$isReady` property to know if it's ready or not yet.

Some SDK methods however waits for the action to complete on Forge's end, we do this by periodically contacting Forge servers and checking if our action has completed, for example:

    $forge->createSite(SERVER_ID, [SITE_PARAMETERS]);

This method will ping Forge servers every 5 seconds and see if the newly created Site's status is `installed` and only return when it's so, in case the waiting exceeded 30 seconds
a `Laravel\Forge\Exceptions\TimeoutException` will be thrown.

You can easily stop this behaviour be setting the `$wait` argument to false:

    $forge->createSite(SERVER_ID, [SITE_PARAMETERS], false);

You can also set the desired timeout value:

    $forge->setTimeout(120)->createSite(SERVER_ID, [SITE_PARAMETERS]);

<a name="authenticated-user"></a>
### Authenticated User

    $forge->user();

<a name="managing-servers"></a>
### Managing Servers

    $forge->servers();
    $forge->server($serverId);
    $forge->createServer(array $data);
    $forge->updateServer($serverId, array $data);
    $forge->deleteServer($serverId);
    $forge->rebootServer($serverId);

    // Server access
    $forge->revokeAccessToServer($serverId);
    $forge->reconnectToServer($serverId);
    $forge->reactivateToServer($serverId);

On a Server instance you may also call:

    $server->update(array $data);
    $server->delete();
    $server->reboot();
    $server->revokeAccess();
    $server->reconnect();
    $server->reactivate();
    $server->rebootMysql();
    $server->stopMysql();
    $server->rebootPostgres();
    $server->stopPostgres();
    $server->rebootNginx();
    $server->stopNginx();
    $server->installBlackfire(array $data);
    $server->removeBlackfire();
    $server->installPapertrail(array $data);
    $server->removePapertrail();
    $server->enableOPCache();
    $server->disableOPCache();
    $server->upgradePHP();

<a name="server-ssh-keys"></a>
### Server SSH Keys

    $forge->keys($serverId);
    $forge->SSHKey($serverId, $keyId);
    $forge->createSSHKey($serverId, array $data, $wait = true);
    $forge->deleteSSHKey($serverId, $keyId);

On a SSHKey Instance you may also call:

    $sshKey->delete();

<a name="server-scheduled-jobs"></a>
### Server Scheduled Jobs

    $forge->jobs($serverId);
    $forge->job($serverId, $jobId);
    $forge->createJob($serverId, array $data, $wait = true);
    $forge->deleteJob($serverId, $jobId);

On a Job Instance you may also call:

    $job->delete();

<a name="server-events"></a>
### Server Events

    $forge->events();
    $forge->events($serverId);

<a name="managing-services"></a>
### Managing Services

    // MySQL
    $forge->rebootMysql($serverId);
    $forge->stopMysql($serverId);

    // Postgres
    $forge->rebootPostgres($serverId);
    $forge->stopPostgres($serverId);

    // Nginx
    $forge->rebootNginx($serverId);
    $forge->stopNginx($serverId);
    $forge->siteNginxFile($serverId, $siteId);
    $forge->updateSiteNginxFile($serverId, $siteId, $content);

    // Blackfire
    $forge->installBlackfire($serverId, array $data);
    $forge->removeBlackfire($serverId);

    // Papertrail
    $forge->installPapertrail($serverId, array $data);
    $forge->removePapertrail($serverId);

    // OPCache
    $forge->enableOPCache($serverId);
    $forge->disableOPCache($serverId);

    // PHP
    $forge->upgradePHP($serverId);

<a name="server-daemons"></a>
### Server Daemons

    $forge->daemons($serverId);
    $forge->daemon($serverId, $daemonId);
    $forge->createDaemon($serverId, array $data, $wait = true);
    $forge->restartDaemon($serverId, $daemonId, $wait = true);
    $forge->deleteDaemon($serverId, $daemonId);

On a Daemon Instance you may also call:

    $daemon->restart($wait = true);
    $daemon->delete();

<a name="server-firewall-rules"></a>
### Server Firewall Rules

    $forge->firewallRules($serverId);
    $forge->firewallRule($serverId, $ruleId);
    $forge->createFirewallRule($serverId, array $data, $wait = true);
    $forge->deleteFirewallRule($serverId, $ruleId);

On a FirewallRule Instance you may also call:

    $rule->delete();

<a name="managing-sites"></a>
### Managing Sites

    $forge->sites($serverId);
    $forge->site($serverId, $siteId);
    $forge->createSite($serverId, array $data, $wait = true);
    $forge->updateSite($serverId, $siteId, array $data);
    $forge->refreshSiteToken($serverId, $siteId);
    $forge->deleteSite($serverId, $siteId);

    // Environment File
    $forge->siteEnvironmentFile($serverId, $siteId);
    $forge->updateSiteEnvironmentFile($serverId, $siteId, $content);

    // Site Repositories and Deployments
    $forge->installGitRepositoryOnSite($serverId, $siteId, array $data, $wait = false);
    $forge->updateSiteGitRepository($serverId, $siteId, array $data);
    $forge->destroySiteGitRepository($serverId, $siteId, $wait = false);
    $forge->siteDeploymentScript($serverId, $siteId);
    $forge->updateSiteDeploymentScript($serverId, $siteId, $content);
    $forge->enableQuickDeploy($serverId, $siteId);
    $forge->disableQuickDeploy($serverId, $siteId);
    $forge->deploySite($serverId, $siteId, $wait = false);
    $forge->resetDeploymentState($serverId, $siteId);
    $forge->siteDeploymentLog($serverId, $siteId);

    // Notifications
    $forge->enableHipchatNotifications($serverId, $siteId, array $data);
    $forge->disableHipchatNotifications($serverId, $siteId);

    // Installing Wordpress
    $forge->installWordPress($serverId, $siteId, array $data);
    $forge->removeWordPress($serverId, $siteId);

    // Updating Node balancing Configuration
    $forge->updateNodeBalancingConfiguration($serverId, $siteId, array $data);

On a Site Instance you may also call:

    $site->refreshToken();
    $site->delete();
    $site->installGitRepository(array $data, $wait = false);
    $site->updateGitRepository(array $data);
    $site->destroyGitRepository($wait = false);
    $site->getDeploymentScript();
    $site->updateDeploymentScript($content);
    $site->enableQuickDeploy();
    $site->disableQuickDeploy();
    $site->deploySite($wait = false);
    $site->enableHipchatNotifications(array $data);
    $site->disableHipchatNotifications();
    $site->installWordPress($data);
    $site->removeWordPress();

<a name="site-workers"></a>
### Site Workers

    $forge->workers($serverId, $siteId);
    $forge->worker($serverId, $siteId, $workerId);
    $forge->createWorker($serverId, $siteId, array $data, $wait = true);
    $forge->deleteWorker($serverId, $siteId, $workerId);
    $forge->restartWorker($serverId, $siteId, $workerId, $wait = true);

On a Worker Instance you may also call:

    $worker->delete();
    $worker->restart($wait = true);

<a name="site-webhooks"></a>
### Site Webhooks

    $forge->webhooks($serverId, $siteId);
    $forge->webhook($serverId, $siteId, $webhookId);
    $forge->createWebhook($serverId, $siteId, array $data);
    $forge->deleteWebhook($serverId, $siteId, $webhookId);

On a Webhook Instance you may also call:

    $webhook->delete();

<a name="site-ssl-certificates"></a>
### Site SSL Certificates

    $forge->certificates($serverId, $siteId);
    $forge->certificate($serverId, $siteId, $certificateId);
    $forge->createCertificate($serverId, $siteId, array $data, $wait = true);
    $forge->deleteCertificate($serverId, $siteId, $certificateId);
    $forge->getCertificateSigningRequest($serverId, $siteId, $certificateId);
    $forge->installCertificate($serverId, $siteId, $certificateId, array $data, $wait = true);
    $forge->activateCertificate($serverId, $siteId, $certificateId, $wait = true);
    $forge->obtainLetsEncryptCertificate($serverId, $siteId, $data, $wait = true);

On a Certificate Instance you may also call:

    $certificate->delete();
    $certificate->getSigningRequest();
    $certificate->install($wait = true);
    $certificate->activate($wait = true);

<a name="managing-mysql"></a>
### Managing MySQL

    $forge->mysqlDatabases($serverId);
    $forge->mysqlDatabase($serverId, $databaseId);
    $forge->createMysqlDatabase($serverId, array $data, $wait = true);
    $forge->updateMysqlDatabase($serverId, $databaseId, array $data);
    $forge->deleteMysqlDatabase($serverId, $databaseId);

    // Users
    $forge->mysqlUsers($serverId);
    $forge->mysqlUser($serverId, $userId);
    $forge->createMysqlUser($serverId, array $data, $wait = true);
    $forge->updateMysqlUser($serverId, $userId, array $data);
    $forge->deleteMysqlUser($serverId, $userId);

On a MysqlDatabase Instance you may also call:

    $database->update(array $data);
    $database->delete();

On a MysqlUser Instance you may also call:

    $databaseUser->update(array $data);
    $databaseUser->delete();

<a name="managing-recipes"></a>
### Managing Recipes

    $forge->recipes();
    $forge->recipe($recipeId);
    $forge->createRecipe(array $data);
    $forge->updateRecipe($recipeId, array $data);
    $forge->deleteRecipe($recipeId);
    $forge->runRecipe($recipeId, array $data);

On a Recipe Instance you may also call:

    $recipe->update(array $data);
    $recipe->delete();
    $recipe->run(array $data);

<a name="managing-backups"></a>
### Managing Backups

    $forge->backupConfigurations($serverId);
    $forge->createBackupConfiguration($serverId, array $data);
    $forge->backupConfiguration($serverId, $backupConfigurationId);
    $forge->deleteBackupConfiguration($serverId, $backupConfigurationId);
    $forge->restoreBackup($serverId, $backupConfigurationId, $backupId);
    $forge->deleteBackup($serverId, $backupConfigurationId, $backupId);

On a BackupConfiguration Instance you may also call:

    $extendedConfig = $backupConfig->get(); // Load the databases also
    $backupConfig->delete();
    $backupConfig->restoreBackup($backupId);
    $backupConfig->deleteBackup($backupId);

On a Backup Instance you may also call:

    $backupConfig->delete();
    $backupConfig->restore();
